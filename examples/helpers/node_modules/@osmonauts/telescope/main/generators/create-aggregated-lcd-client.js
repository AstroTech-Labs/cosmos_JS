"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.plugin = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _imports = require("../imports");

var _protoParser = require("@osmonauts/proto-parser");

var _parse = require("../parse");

var _path = require("path");

var _mkdirp = require("mkdirp");

var _fs = require("fs");

var _ast = require("@osmonauts/ast");

var _build = require("../build");

var t = _interopRequireWildcard(require("@babel/types"));

var _generator = _interopRequireDefault(require("@babel/generator"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var plugin = function plugin(builder) {
  if (!builder.options.aggregatedLCD) {
    return;
  }

  var opts = builder.options.aggregatedLCD;
  var dir = opts.dir,
      fname = opts.filename,
      packages = opts.packages,
      addToBundle = opts.addToBundle;
  var localname = (0, _path.join)(dir, fname);
  var refs = builder.store.filterProtoWhere(function (ref) {
    return packages.includes(ref.proto["package"]);
  });
  var services = refs.map(function (ref) {
    var _proto$Query;

    var proto = (0, _protoParser.getNestedProto)(ref.traversed);

    if (!(proto !== null && proto !== void 0 && proto.Query) || ((_proto$Query = proto.Query) === null || _proto$Query === void 0 ? void 0 : _proto$Query.type) !== 'Service') {
      return;
    }

    return proto.Query;
  }).filter(Boolean);
  var tc = new _build.TelescopeParseContext(refs[0], builder.store, builder.options);
  var context = tc.proto;
  var lcdast = (0, _ast.createAggregatedLCDClient)(context, services, 'QueryClient');
  var importsForAggregator = (0, _imports.aggregateImports)(tc, {}, localname); /////////
  /////////
  /////////
  /////////

  var queryContexts = builder.contexts.filter(function (context) {
    return context.queries.length > 0;
  });
  var progImports = queryContexts.reduce(function (m, c) {
    var _proto$Query2;

    if (!builder.options.aggregatedLCD.packages.includes(c.ref.proto["package"])) {
      return m;
    }

    var ctx = new _build.TelescopeParseContext(c.ref, c.store, builder.options); // get mutations, services

    (0, _parse.parse)(ctx);
    var proto = (0, _protoParser.getNestedProto)(c.ref.traversed); // hard-coding, for now, only Query service

    if (!(proto !== null && proto !== void 0 && proto.Query) || ((_proto$Query2 = proto.Query) === null || _proto$Query2 === void 0 ? void 0 : _proto$Query2.type) !== 'Service') {
      return;
    }

    var serviceImports = (0, _imports.getDepsFromQueries)(ctx.queries, localname);
    var imports = (0, _imports.aggregateImports)(ctx, serviceImports, localname);
    var fixlocalpaths = imports.map(function (imp) {
      return _objectSpread(_objectSpread({}, imp), {}, {
        path: imp.path.startsWith('.') || imp.path.startsWith('@') ? imp.path : "./".concat(imp.path)
      });
    });
    return [].concat((0, _toConsumableArray2["default"])(m), (0, _toConsumableArray2["default"])(fixlocalpaths));
  }, []);
  var importStmts = (0, _imports.getImportStatements)([].concat((0, _toConsumableArray2["default"])(importsForAggregator), (0, _toConsumableArray2["default"])(progImports)));
  var prog = [].concat(importStmts).concat(lcdast);
  var ast = t.program(prog);
  var content = (0, _generator["default"])(ast).code;
  var filename = (0, _path.join)(builder.outPath, localname);
  (0, _mkdirp.sync)((0, _path.dirname)(filename));
  (0, _fs.writeFileSync)(filename, content);
};

exports.plugin = plugin;