"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.plugin = void 0;

var _path = require("path");

var _ast = require("@osmonauts/ast");

var _case = require("case");

var _utils = require("../utils");

var plugin = function plugin(builder, bundler) {
  if (!bundler.registries || !bundler.registries.length) {
    return;
  }

  var registryImports = [];
  var converterImports = [];
  var clientFile = (0, _path.join)("".concat(bundler.bundle.base), 'client.ts');
  bundler.files.push(clientFile);
  var ctxRef = {
    absolute: '/',
    filename: '/',
    proto: {
      imports: [],
      "package": bundler.bundle.base,
      // for package options
      root: {}
    }
  };
  var ctx = new _ast.GenericParseContext(ctxRef, null, builder.options);
  var registryVariables = [];
  var converterVariables = [];
  bundler.registries.forEach(function (registry) {
    var rel = (0, _path.relative)((0, _path.dirname)(clientFile), registry.localname);
    if (!rel.startsWith('.')) rel = "./".concat(rel);
    var variable = (0, _utils.variableSlug)(registry.localname);
    registryVariables.push(variable);
    registryImports.push((0, _ast.importNamespace)(variable, rel));
  });
  bundler.converters.forEach(function (converter) {
    var rel = (0, _path.relative)((0, _path.dirname)(clientFile), converter.localname);
    if (!rel.startsWith('.')) rel = "./".concat(rel);
    var variable = (0, _utils.variableSlug)(converter.localname);
    converterVariables.push(variable);
    converterImports.push((0, _ast.importNamespace)(variable, rel));
  });
  var name = 'getSigning' + (0, _case.pascal)(bundler.bundle.base + 'Client');
  var clientBody = (0, _ast.createStargateClient)({
    context: ctx,
    name: name,
    registries: registryVariables,
    aminos: converterVariables
  });
  var cProg = [(0, _ast.importStmt)(['OfflineSigner', 'GeneratedType', 'Registry'], '@cosmjs/proto-signing'), (0, _ast.importStmt)(['defaultRegistryTypes', 'AminoTypes', 'SigningStargateClient'], '@cosmjs/stargate')].concat(registryImports).concat(converterImports).concat(clientBody);
  var clientOutFile = (0, _path.join)(builder.outPath, clientFile);
  bundler.writeAst(cProg, clientOutFile);
};

exports.plugin = plugin;