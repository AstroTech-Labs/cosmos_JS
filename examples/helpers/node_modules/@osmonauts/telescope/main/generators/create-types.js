"use strict";

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.plugin = void 0;

var t = _interopRequireWildcard(require("@babel/types"));

var _imports = require("../imports");

var _parse = require("../parse");

var _fs = require("fs");

var _path = require("path");

var _mkdirp = require("mkdirp");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var plugin = function plugin(builder, bundler) {
  // [x] search for all files that live in package
  var baseProtos = builder.store.getProtos().filter(function (ref) {
    return ref.proto["package"].split('.')[0] === bundler.bundle.base;
  }); // [x] write out all TS files for package

  bundler.contexts = baseProtos.map(function (ref) {
    var context = builder.context(ref);
    (0, _parse.parse)(context);
    context.buildBase(); // build BASE file

    var importStmts = (0, _imports.buildAllImports)(context, null, context.ref.filename);
    var prog = [].concat(importStmts); // package var

    if (context.options.includePackageVar) {
      prog.push(t.exportNamedDeclaration(t.variableDeclaration('const', [t.variableDeclarator(t.identifier('protobufPackage'), t.stringLiteral(context.ref.proto["package"]))])));
    } // body


    prog.push.apply(prog, context.body);
    var localname = bundler.getLocalFilename(ref);
    var filename = bundler.getFilename(localname);

    if (context.body.length > 0) {
      bundler.writeAst(prog, filename);
    } else {
      (0, _mkdirp.sync)((0, _path.dirname)(filename));
      (0, _fs.writeFileSync)(filename, "export {}");
    }

    return context;
  });
};

exports.plugin = plugin;