"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.plugin = void 0;

var _imports = require("../imports");

var _protoParser = require("@osmonauts/proto-parser");

var _parse = require("../parse");

var _ast = require("@osmonauts/ast");

var plugin = function plugin(builder, bundler) {
  if (!builder.options.lcdClients.enabled) {
    return;
  }

  var queryContexts = bundler.contexts.filter(function (context) {
    return context.queries.length > 0;
  }); // [x] write out one registry helper for all contexts w/mutations

  var lcdClients = queryContexts.map(function (c) {
    var _proto$Query;

    var enabled = c.proto.pluginValue('lcdClients.enabled');
    if (!enabled) return;
    var localname = bundler.getLocalFilename(c.ref, 'lcd');
    var filename = bundler.getFilename(localname);
    var ctx = bundler.getFreshContext(c); // get mutations, services

    (0, _parse.parse)(ctx);
    var proto = (0, _protoParser.getNestedProto)(c.ref.traversed); // hard-coding, for now, only Query service

    if (!(proto !== null && proto !== void 0 && proto.Query) || ((_proto$Query = proto.Query) === null || _proto$Query === void 0 ? void 0 : _proto$Query.type) !== 'Service') {
      return;
    }

    var lcdAst = (0, _ast.createLCDClient)(ctx.generic, proto.Query);

    if (!lcdAst) {
      return;
    }

    var serviceImports = (0, _imports.getDepsFromQueries)(ctx.queries, localname);
    var imports = (0, _imports.buildAllImports)(ctx, serviceImports, localname);
    var prog = [].concat(imports).concat(ctx.body).concat(lcdAst);
    bundler.writeAst(prog, filename);
    bundler.addToBundle(c, localname);
    return {
      // TODO use this to build LCD aggregators with scopes
      "package": c.ref.proto["package"],
      localname: localname,
      filename: filename
    };
  }).filter(Boolean);
  bundler.addLCDClients(lcdClients);
};

exports.plugin = plugin;