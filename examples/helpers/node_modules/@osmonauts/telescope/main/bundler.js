"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Bundler = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var t = _interopRequireWildcard(require("@babel/types"));

var _path = require("path");

var _mkdirp = require("mkdirp");

var _build = require("./build");

var _fs = require("fs");

var _generator = _interopRequireDefault(require("@babel/generator"));

var _bundle = require("./bundle");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var Bundler = /*#__PURE__*/function () {
  function Bundler(builder, bundle) {
    (0, _classCallCheck2["default"])(this, Bundler);
    (0, _defineProperty2["default"])(this, "builder", void 0);
    (0, _defineProperty2["default"])(this, "contexts", []);
    (0, _defineProperty2["default"])(this, "bundle", void 0);
    (0, _defineProperty2["default"])(this, "files", void 0);
    (0, _defineProperty2["default"])(this, "converters", []);
    (0, _defineProperty2["default"])(this, "lcdClients", []);
    (0, _defineProperty2["default"])(this, "rpcQueryClients", []);
    (0, _defineProperty2["default"])(this, "rpcMsgClients", []);
    (0, _defineProperty2["default"])(this, "registries", []);
    this.builder = builder;
    this.bundle = bundle;
    this.files = [bundle.bundleFile];
  }

  (0, _createClass2["default"])(Bundler, [{
    key: "addLCDClients",
    value: function addLCDClients(files) {
      [].push.apply(this.lcdClients, files);
      this.builder.addLCDClients(files);
    }
  }, {
    key: "addRPCQueryClients",
    value: function addRPCQueryClients(files) {
      [].push.apply(this.rpcQueryClients, files);
      this.builder.addRPCQueryClients(files);
    }
  }, {
    key: "addRPCMsgClients",
    value: function addRPCMsgClients(files) {
      [].push.apply(this.rpcMsgClients, files);
      this.builder.addRPCMsgClients(files);
    }
  }, {
    key: "addRegistries",
    value: function addRegistries(files) {
      [].push.apply(this.registries, files);
      this.builder.addRegistries(files);
    }
  }, {
    key: "addConverters",
    value: function addConverters(files) {
      [].push.apply(this.converters, files);
      this.builder.addConverters(files);
    }
  }, {
    key: "getFreshContext",
    value: function getFreshContext(context) {
      return new _build.TelescopeParseContext(context.ref, context.store, this.builder.options);
    }
  }, {
    key: "getLocalFilename",
    value: function getLocalFilename(ref, suffix) {
      return suffix ? ref.filename.replace(/\.proto$/, ".".concat(suffix, ".ts")) : ref.filename.replace(/\.proto$/, ".ts");
    }
  }, {
    key: "getFilename",
    value: function getFilename(localname) {
      return (0, _path.resolve)((0, _path.join)(this.builder.outPath, localname));
    }
  }, {
    key: "writeAst",
    value: function writeAst(program, filename) {
      var ast = t.program(program);
      var content = (0, _generator["default"])(ast).code;
      (0, _mkdirp.sync)((0, _path.dirname)(filename));
      (0, _fs.writeFileSync)(filename, content);
    } // addToBundle adds the path into the namespaced bundle object

  }, {
    key: "addToBundle",
    value: function addToBundle(context, localname) {
      (0, _bundle.createFileBundle)(context.ref.proto["package"], localname, this.bundle.bundleFile, this.bundle.importPaths, this.bundle.bundleVariables);
    }
  }, {
    key: "addToBundleToPackage",
    value: function addToBundleToPackage(packagename, localname) {
      (0, _bundle.createFileBundle)(packagename, localname, this.bundle.bundleFile, this.bundle.importPaths, this.bundle.bundleVariables);
    }
  }]);
  return Bundler;
}();

exports.Bundler = Bundler;