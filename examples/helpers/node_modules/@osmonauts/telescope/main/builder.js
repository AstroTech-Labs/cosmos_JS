"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TelescopeBuilder = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _protoParser = require("@osmonauts/proto-parser");

var _build = require("./build");

var _types = require("@osmonauts/types");

var _bundle = require("./bundle");

var _bundler = require("./bundler");

var _deepmerge = _interopRequireDefault(require("deepmerge"));

var _createTypes = require("./generators/create-types");

var _createAminoConverters = require("./generators/create-amino-converters");

var _createRegistries = require("./generators/create-registries");

var _createLcdClients = require("./generators/create-lcd-clients");

var _createAggregatedLcdClient = require("./generators/create-aggregated-lcd-client");

var _createLcdClientScoped = require("./generators/create-lcd-client-scoped");

var _createRpcQueryClientScoped = require("./generators/create-rpc-query-client-scoped");

var _createRpcMsgClientScoped = require("./generators/create-rpc-msg-client-scoped");

var _createRpcQueryClients = require("./generators/create-rpc-query-clients");

var _createRpcMsgClients = require("./generators/create-rpc-msg-clients");

var _createStargateClients = require("./generators/create-stargate-clients");

var _createBundle = require("./generators/create-bundle");

var _createIndex = require("./generators/create-index");

var TelescopeBuilder = /*#__PURE__*/function () {
  function TelescopeBuilder(_ref) {
    var protoDirs = _ref.protoDirs,
        outPath = _ref.outPath,
        store = _ref.store,
        options = _ref.options;
    (0, _classCallCheck2["default"])(this, TelescopeBuilder);
    (0, _defineProperty2["default"])(this, "store", void 0);
    (0, _defineProperty2["default"])(this, "protoDirs", void 0);
    (0, _defineProperty2["default"])(this, "outPath", void 0);
    (0, _defineProperty2["default"])(this, "options", void 0);
    (0, _defineProperty2["default"])(this, "contexts", []);
    (0, _defineProperty2["default"])(this, "files", []);
    (0, _defineProperty2["default"])(this, "converters", []);
    (0, _defineProperty2["default"])(this, "lcdClients", []);
    (0, _defineProperty2["default"])(this, "rpcQueryClients", []);
    (0, _defineProperty2["default"])(this, "rpcMsgClients", []);
    (0, _defineProperty2["default"])(this, "registries", []);
    this.protoDirs = protoDirs;
    this.outPath = outPath;
    this.options = (0, _deepmerge["default"])(_types.defaultTelescopeOptions, options !== null && options !== void 0 ? options : {});
    this.store = store !== null && store !== void 0 ? store : new _protoParser.ProtoStore(protoDirs);
    this.store.traverseAll();
  }

  (0, _createClass2["default"])(TelescopeBuilder, [{
    key: "context",
    value: function context(ref) {
      var ctx = new _build.TelescopeParseContext(ref, this.store, this.options);
      this.contexts.push(ctx);
      return ctx;
    }
  }, {
    key: "addRPCQueryClients",
    value: function addRPCQueryClients(files) {
      [].push.apply(this.rpcQueryClients, files);
    }
  }, {
    key: "addRPCMsgClients",
    value: function addRPCMsgClients(files) {
      [].push.apply(this.rpcMsgClients, files);
    }
  }, {
    key: "addLCDClients",
    value: function addLCDClients(files) {
      [].push.apply(this.lcdClients, files);
    }
  }, {
    key: "addRegistries",
    value: function addRegistries(files) {
      [].push.apply(this.registries, files);
    }
  }, {
    key: "addConverters",
    value: function addConverters(files) {
      [].push.apply(this.converters, files);
    }
  }, {
    key: "build",
    value: function build() {
      var _this = this;

      // [x] get bundle of all packages
      var bundles = (0, _bundle.bundlePackages)(this.store).map(function (bundle) {
        // store bundleFile in filesToInclude
        var bundler = new _bundler.Bundler(_this, bundle); // [x] write out all TS files for package

        (0, _createTypes.plugin)(_this, bundler); // [x] write out one amino helper for all contexts w/mutations

        (0, _createAminoConverters.plugin)(_this, bundler); // [x] write out one registry helper for all contexts w/mutations

        (0, _createRegistries.plugin)(_this, bundler); // [x] write out one registry helper for all contexts w/mutations

        (0, _createLcdClients.plugin)(_this, bundler);
        (0, _createRpcQueryClients.plugin)(_this, bundler);
        (0, _createRpcMsgClients.plugin)(_this, bundler); // [x] write out one client for each base package, referencing the last two steps

        (0, _createStargateClients.plugin)(_this, bundler);
        return bundler;
      }); // post run plugins

      bundles.forEach(function (bundler) {
        (0, _createLcdClientScoped.plugin)(_this, bundler);
        (0, _createRpcQueryClientScoped.plugin)(_this, bundler);
        (0, _createRpcMsgClientScoped.plugin)(_this, bundler);
        (0, _createBundle.plugin)(_this, bundler);
      });
      (0, _createAggregatedLcdClient.plugin)(this); // finally, write one index file with all files, exported

      (0, _createIndex.plugin)(this);
    }
  }]);
  return TelescopeBuilder;
}();

exports.TelescopeBuilder = TelescopeBuilder;