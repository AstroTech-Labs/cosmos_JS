"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _prompt = require("../prompt");

var _index = _interopRequireDefault(require("../index"));

var _fs = require("fs");

var _types = require("@osmonauts/types");

var _default = /*#__PURE__*/function () {
  var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(argv) {
    var SKIP, questions, _yield$prompt, protoDirs, outPath, includeAminos, includeLCDClients, includePackageVar, includeRPCClients, timestampFormat, durationFormat, options;

    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (argv.useDefaults) {
              SKIP = ['aminoEncoding', 'packages'];
              Object.keys(_types.defaultTelescopeOptions).forEach(function (key) {
                if (SKIP.includes(key)) return;
                argv[key] = _types.defaultTelescopeOptions[key];
              });
            }

            questions = [{
              _: true,
              type: 'path',
              name: 'protoDirs',
              message: 'where is the proto directory?',
              "default": './proto'
            }, {
              _: true,
              type: 'path',
              name: 'outPath',
              message: 'where is the output directory?',
              "default": './src/proto'
            }, {
              type: 'confirm',
              name: 'includeAminos',
              message: 'output amino messages?',
              "default": true
            }, {
              type: 'confirm',
              name: 'includeLCDClients',
              message: 'output LCD Clients?',
              "default": true
            }, {
              type: 'confirm',
              name: 'includeRPCClients',
              message: 'output RPC clients?',
              "default": true
            }, {
              type: 'list',
              name: 'timestampFormat',
              message: 'treat timestamps as Date or Timestamp?',
              "default": 'timestamp',
              choices: ['date', 'timestamp']
            }, {
              type: 'list',
              name: 'durationFormat',
              message: 'treat durations as Duration or string?',
              "default": 'duration',
              choices: ['duration', 'string']
            }];
            _context.next = 4;
            return (0, _prompt.prompt)(questions, argv);

          case 4:
            _yield$prompt = _context.sent;
            protoDirs = _yield$prompt.protoDirs;
            outPath = _yield$prompt.outPath;
            includeAminos = _yield$prompt.includeAminos;
            includeLCDClients = _yield$prompt.includeLCDClients;
            includePackageVar = _yield$prompt.includePackageVar;
            includeRPCClients = _yield$prompt.includeRPCClients;
            timestampFormat = _yield$prompt.timestampFormat;
            durationFormat = _yield$prompt.durationFormat;

            if (!Array.isArray(protoDirs)) {
              protoDirs = [protoDirs];
            }

            options = {
              includePackageVar: includePackageVar,
              typingsFormat: {
                timestamp: timestampFormat,
                duration: durationFormat
              },
              aminoEncoding: {
                enabled: includeAminos
              },
              lcdClients: {
                enabled: includeLCDClients
              },
              rpcClients: {
                enabled: includeRPCClients
              }
            };
            (0, _fs.writeFileSync)(process.cwd() + '/.telescope.json', JSON.stringify({
              protoDirs: protoDirs,
              outPath: outPath,
              options: options
            }, null, 2));
            (0, _index["default"])({
              protoDirs: protoDirs,
              outPath: outPath,
              options: options
            });
            console.log("\u2728 transpilation successful!");

          case 18:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}();

exports["default"] = _default;