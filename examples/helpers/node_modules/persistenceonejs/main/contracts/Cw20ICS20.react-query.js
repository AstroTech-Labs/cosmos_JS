"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cw20ICS20QueryKeys = void 0;
exports.useCw20ICS20AdminQuery = useCw20ICS20AdminQuery;
exports.useCw20ICS20AllowMutation = useCw20ICS20AllowMutation;
exports.useCw20ICS20AllowedQuery = useCw20ICS20AllowedQuery;
exports.useCw20ICS20ChannelQuery = useCw20ICS20ChannelQuery;
exports.useCw20ICS20ConfigQuery = useCw20ICS20ConfigQuery;
exports.useCw20ICS20ListAllowedQuery = useCw20ICS20ListAllowedQuery;
exports.useCw20ICS20ListChannelsQuery = useCw20ICS20ListChannelsQuery;
exports.useCw20ICS20PortQuery = useCw20ICS20PortQuery;
exports.useCw20ICS20ReceiveMutation = useCw20ICS20ReceiveMutation;
exports.useCw20ICS20TransferMutation = useCw20ICS20TransferMutation;
exports.useCw20ICS20UpdateAdminMutation = useCw20ICS20UpdateAdminMutation;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _reactQuery = require("@tanstack/react-query");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var cw20ICS20QueryKeys = {
  contract: [{
    contract: "cw20ICS20"
  }],
  address: function address(contractAddress) {
    return [_objectSpread(_objectSpread({}, cw20ICS20QueryKeys.contract[0]), {}, {
      address: contractAddress
    })];
  },
  port: function port(contractAddress, args) {
    return [_objectSpread(_objectSpread({}, cw20ICS20QueryKeys.address(contractAddress)[0]), {}, {
      method: "port",
      args: args
    })];
  },
  listChannels: function listChannels(contractAddress, args) {
    return [_objectSpread(_objectSpread({}, cw20ICS20QueryKeys.address(contractAddress)[0]), {}, {
      method: "list_channels",
      args: args
    })];
  },
  channel: function channel(contractAddress, args) {
    return [_objectSpread(_objectSpread({}, cw20ICS20QueryKeys.address(contractAddress)[0]), {}, {
      method: "channel",
      args: args
    })];
  },
  config: function config(contractAddress, args) {
    return [_objectSpread(_objectSpread({}, cw20ICS20QueryKeys.address(contractAddress)[0]), {}, {
      method: "config",
      args: args
    })];
  },
  admin: function admin(contractAddress, args) {
    return [_objectSpread(_objectSpread({}, cw20ICS20QueryKeys.address(contractAddress)[0]), {}, {
      method: "admin",
      args: args
    })];
  },
  allowed: function allowed(contractAddress, args) {
    return [_objectSpread(_objectSpread({}, cw20ICS20QueryKeys.address(contractAddress)[0]), {}, {
      method: "allowed",
      args: args
    })];
  },
  listAllowed: function listAllowed(contractAddress, args) {
    return [_objectSpread(_objectSpread({}, cw20ICS20QueryKeys.address(contractAddress)[0]), {}, {
      method: "list_allowed",
      args: args
    })];
  }
};
exports.cw20ICS20QueryKeys = cw20ICS20QueryKeys;

function useCw20ICS20ListAllowedQuery(_ref) {
  var client = _ref.client,
      args = _ref.args,
      options = _ref.options;
  return (0, _reactQuery.useQuery)(cw20ICS20QueryKeys.listAllowed(client === null || client === void 0 ? void 0 : client.contractAddress, args), function () {
    return client ? client.listAllowed({
      limit: args.limit,
      startAfter: args.startAfter
    }) : Promise.reject(new Error("Invalid client"));
  }, _objectSpread(_objectSpread({}, options), {}, {
    enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true)
  }));
}

function useCw20ICS20AllowedQuery(_ref2) {
  var client = _ref2.client,
      args = _ref2.args,
      options = _ref2.options;
  return (0, _reactQuery.useQuery)(cw20ICS20QueryKeys.allowed(client === null || client === void 0 ? void 0 : client.contractAddress, args), function () {
    return client ? client.allowed({
      contract: args.contract
    }) : Promise.reject(new Error("Invalid client"));
  }, _objectSpread(_objectSpread({}, options), {}, {
    enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true)
  }));
}

function useCw20ICS20AdminQuery(_ref3) {
  var client = _ref3.client,
      options = _ref3.options;
  return (0, _reactQuery.useQuery)(cw20ICS20QueryKeys.admin(client === null || client === void 0 ? void 0 : client.contractAddress), function () {
    return client ? client.admin() : Promise.reject(new Error("Invalid client"));
  }, _objectSpread(_objectSpread({}, options), {}, {
    enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true)
  }));
}

function useCw20ICS20ConfigQuery(_ref4) {
  var client = _ref4.client,
      options = _ref4.options;
  return (0, _reactQuery.useQuery)(cw20ICS20QueryKeys.config(client === null || client === void 0 ? void 0 : client.contractAddress), function () {
    return client ? client.config() : Promise.reject(new Error("Invalid client"));
  }, _objectSpread(_objectSpread({}, options), {}, {
    enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true)
  }));
}

function useCw20ICS20ChannelQuery(_ref5) {
  var client = _ref5.client,
      args = _ref5.args,
      options = _ref5.options;
  return (0, _reactQuery.useQuery)(cw20ICS20QueryKeys.channel(client === null || client === void 0 ? void 0 : client.contractAddress, args), function () {
    return client ? client.channel({
      id: args.id
    }) : Promise.reject(new Error("Invalid client"));
  }, _objectSpread(_objectSpread({}, options), {}, {
    enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true)
  }));
}

function useCw20ICS20ListChannelsQuery(_ref6) {
  var client = _ref6.client,
      options = _ref6.options;
  return (0, _reactQuery.useQuery)(cw20ICS20QueryKeys.listChannels(client === null || client === void 0 ? void 0 : client.contractAddress), function () {
    return client ? client.listChannels() : Promise.reject(new Error("Invalid client"));
  }, _objectSpread(_objectSpread({}, options), {}, {
    enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true)
  }));
}

function useCw20ICS20PortQuery(_ref7) {
  var client = _ref7.client,
      options = _ref7.options;
  return (0, _reactQuery.useQuery)(cw20ICS20QueryKeys.port(client === null || client === void 0 ? void 0 : client.contractAddress), function () {
    return client ? client.port() : Promise.reject(new Error("Invalid client"));
  }, _objectSpread(_objectSpread({}, options), {}, {
    enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true)
  }));
}

function useCw20ICS20UpdateAdminMutation(options) {
  return (0, _reactQuery.useMutation)(function (_ref8) {
    var client = _ref8.client,
        msg = _ref8.msg,
        _ref8$args = _ref8.args;
    _ref8$args = _ref8$args === void 0 ? {} : _ref8$args;
    var fee = _ref8$args.fee,
        memo = _ref8$args.memo,
        funds = _ref8$args.funds;
    return client.updateAdmin(msg, fee, memo, funds);
  }, options);
}

function useCw20ICS20AllowMutation(options) {
  return (0, _reactQuery.useMutation)(function (_ref9) {
    var client = _ref9.client,
        msg = _ref9.msg,
        _ref9$args = _ref9.args;
    _ref9$args = _ref9$args === void 0 ? {} : _ref9$args;
    var fee = _ref9$args.fee,
        memo = _ref9$args.memo,
        funds = _ref9$args.funds;
    return client.allow(msg, fee, memo, funds);
  }, options);
}

function useCw20ICS20TransferMutation(options) {
  return (0, _reactQuery.useMutation)(function (_ref10) {
    var client = _ref10.client,
        msg = _ref10.msg,
        _ref10$args = _ref10.args;
    _ref10$args = _ref10$args === void 0 ? {} : _ref10$args;
    var fee = _ref10$args.fee,
        memo = _ref10$args.memo,
        funds = _ref10$args.funds;
    return client.transfer(msg, fee, memo, funds);
  }, options);
}

function useCw20ICS20ReceiveMutation(options) {
  return (0, _reactQuery.useMutation)(function (_ref11) {
    var client = _ref11.client,
        msg = _ref11.msg,
        _ref11$args = _ref11.args;
    _ref11$args = _ref11$args === void 0 ? {} : _ref11$args;
    var fee = _ref11$args.fee,
        memo = _ref11$args.memo,
        funds = _ref11$args.funds;
    return client.receive(msg, fee, memo, funds);
  }, options);
}