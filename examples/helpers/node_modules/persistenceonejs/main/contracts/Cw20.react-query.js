"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cw20QueryKeys = void 0;
exports.useCw20AllAccountsQuery = useCw20AllAccountsQuery;
exports.useCw20AllAllowancesQuery = useCw20AllAllowancesQuery;
exports.useCw20AllowanceQuery = useCw20AllowanceQuery;
exports.useCw20BalanceQuery = useCw20BalanceQuery;
exports.useCw20DownloadLogoQuery = useCw20DownloadLogoQuery;
exports.useCw20MarketingInfoQuery = useCw20MarketingInfoQuery;
exports.useCw20MinterQuery = useCw20MinterQuery;
exports.useCw20TokenInfoQuery = useCw20TokenInfoQuery;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _reactQuery = require("@tanstack/react-query");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

var cw20QueryKeys = {
  contract: [{
    contract: "cw20"
  }],
  address: function address(contractAddress) {
    return [_objectSpread(_objectSpread({}, cw20QueryKeys.contract[0]), {}, {
      address: contractAddress
    })];
  },
  balance: function balance(contractAddress, args) {
    return [_objectSpread(_objectSpread({}, cw20QueryKeys.address(contractAddress)[0]), {}, {
      method: "balance",
      args: args
    })];
  },
  tokenInfo: function tokenInfo(contractAddress, args) {
    return [_objectSpread(_objectSpread({}, cw20QueryKeys.address(contractAddress)[0]), {}, {
      method: "token_info",
      args: args
    })];
  },
  minter: function minter(contractAddress, args) {
    return [_objectSpread(_objectSpread({}, cw20QueryKeys.address(contractAddress)[0]), {}, {
      method: "minter",
      args: args
    })];
  },
  allowance: function allowance(contractAddress, args) {
    return [_objectSpread(_objectSpread({}, cw20QueryKeys.address(contractAddress)[0]), {}, {
      method: "allowance",
      args: args
    })];
  },
  allAllowances: function allAllowances(contractAddress, args) {
    return [_objectSpread(_objectSpread({}, cw20QueryKeys.address(contractAddress)[0]), {}, {
      method: "all_allowances",
      args: args
    })];
  },
  allAccounts: function allAccounts(contractAddress, args) {
    return [_objectSpread(_objectSpread({}, cw20QueryKeys.address(contractAddress)[0]), {}, {
      method: "all_accounts",
      args: args
    })];
  },
  marketingInfo: function marketingInfo(contractAddress, args) {
    return [_objectSpread(_objectSpread({}, cw20QueryKeys.address(contractAddress)[0]), {}, {
      method: "marketing_info",
      args: args
    })];
  },
  downloadLogo: function downloadLogo(contractAddress, args) {
    return [_objectSpread(_objectSpread({}, cw20QueryKeys.address(contractAddress)[0]), {}, {
      method: "download_logo",
      args: args
    })];
  }
};
exports.cw20QueryKeys = cw20QueryKeys;

function useCw20DownloadLogoQuery(_ref) {
  var client = _ref.client,
      options = _ref.options;
  return (0, _reactQuery.useQuery)(cw20QueryKeys.downloadLogo(client === null || client === void 0 ? void 0 : client.contractAddress), function () {
    return client ? client.downloadLogo() : Promise.reject(new Error("Invalid client"));
  }, _objectSpread(_objectSpread({}, options), {}, {
    enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true)
  }));
}

function useCw20MarketingInfoQuery(_ref2) {
  var client = _ref2.client,
      options = _ref2.options;
  return (0, _reactQuery.useQuery)(cw20QueryKeys.marketingInfo(client === null || client === void 0 ? void 0 : client.contractAddress), function () {
    return client ? client.marketingInfo() : Promise.reject(new Error("Invalid client"));
  }, _objectSpread(_objectSpread({}, options), {}, {
    enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true)
  }));
}

function useCw20AllAccountsQuery(_ref3) {
  var client = _ref3.client,
      args = _ref3.args,
      options = _ref3.options;
  return (0, _reactQuery.useQuery)(cw20QueryKeys.allAccounts(client === null || client === void 0 ? void 0 : client.contractAddress, args), function () {
    return client ? client.allAccounts({
      limit: args.limit,
      startAfter: args.startAfter
    }) : Promise.reject(new Error("Invalid client"));
  }, _objectSpread(_objectSpread({}, options), {}, {
    enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true)
  }));
}

function useCw20AllAllowancesQuery(_ref4) {
  var client = _ref4.client,
      args = _ref4.args,
      options = _ref4.options;
  return (0, _reactQuery.useQuery)(cw20QueryKeys.allAllowances(client === null || client === void 0 ? void 0 : client.contractAddress, args), function () {
    return client ? client.allAllowances({
      limit: args.limit,
      owner: args.owner,
      startAfter: args.startAfter
    }) : Promise.reject(new Error("Invalid client"));
  }, _objectSpread(_objectSpread({}, options), {}, {
    enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true)
  }));
}

function useCw20AllowanceQuery(_ref5) {
  var client = _ref5.client,
      args = _ref5.args,
      options = _ref5.options;
  return (0, _reactQuery.useQuery)(cw20QueryKeys.allowance(client === null || client === void 0 ? void 0 : client.contractAddress, args), function () {
    return client ? client.allowance({
      owner: args.owner,
      spender: args.spender
    }) : Promise.reject(new Error("Invalid client"));
  }, _objectSpread(_objectSpread({}, options), {}, {
    enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true)
  }));
}

function useCw20MinterQuery(_ref6) {
  var client = _ref6.client,
      options = _ref6.options;
  return (0, _reactQuery.useQuery)(cw20QueryKeys.minter(client === null || client === void 0 ? void 0 : client.contractAddress), function () {
    return client ? client.minter() : Promise.reject(new Error("Invalid client"));
  }, _objectSpread(_objectSpread({}, options), {}, {
    enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true)
  }));
}

function useCw20TokenInfoQuery(_ref7) {
  var client = _ref7.client,
      options = _ref7.options;
  return (0, _reactQuery.useQuery)(cw20QueryKeys.tokenInfo(client === null || client === void 0 ? void 0 : client.contractAddress), function () {
    return client ? client.tokenInfo() : Promise.reject(new Error("Invalid client"));
  }, _objectSpread(_objectSpread({}, options), {}, {
    enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true)
  }));
}

function useCw20BalanceQuery(_ref8) {
  var client = _ref8.client,
      args = _ref8.args,
      options = _ref8.options;
  return (0, _reactQuery.useQuery)(cw20QueryKeys.balance(client === null || client === void 0 ? void 0 : client.contractAddress, args), function () {
    return client ? client.balance({
      address: args.address
    }) : Promise.reject(new Error("Invalid client"));
  }, _objectSpread(_objectSpread({}, options), {}, {
    enabled: !!client && ((options === null || options === void 0 ? void 0 : options.enabled) != undefined ? options.enabled : true)
  }));
}