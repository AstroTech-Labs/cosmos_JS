"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.wallet = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _ledgerAmino = require("@cosmjs/ledger-amino");

var _protoSigning = require("@cosmjs/proto-signing");

var wallet = {
  setupWebKeplr: function () {
    var _setupWebKeplr = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(config) {
      var offlineSigner;
      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (window.keplr) {
                _context.next = 2;
                break;
              }

              throw new Error("Keplr is not supported or installed on this browser!");

            case 2:
              _context.next = 4;
              return window.keplr.enable(config.chainId)["catch"](function () {
                throw new Error("Keplr can't connect to this chainId!");
              });

            case 4:
              _context.next = 6;
              return window.getOfflineSignerAuto(config.chainId);

            case 6:
              offlineSigner = _context.sent;
              return _context.abrupt("return", offlineSigner);

            case 8:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    function setupWebKeplr(_x) {
      return _setupWebKeplr.apply(this, arguments);
    }

    return setupWebKeplr;
  }(),
  // setupCosmostation: async (config: Config): Promise<OfflineSigner> => {
  //   // Setup signer
  //   const offlineSigner = await getOfflineSigner(config.chainId);
  //   return [signingClient, offlineSigner];
  // },
  setupNodeLocal: function () {
    var _setupNodeLocal = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(config, mnemonic, WalletOptions) {
      var offlineSigner;
      return _regenerator["default"].wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return _protoSigning.DirectSecp256k1HdWallet.fromMnemonic(mnemonic, WalletOptions);

            case 2:
              offlineSigner = _context2.sent;
              return _context2.abrupt("return", offlineSigner);

            case 4:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    function setupNodeLocal(_x2, _x3, _x4) {
      return _setupNodeLocal.apply(this, arguments);
    }

    return setupNodeLocal;
  }(),
  setupWebLedger: function () {
    var _setupWebLedger = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3(config, transport, WalletOptions) {
      var interactiveTimeout, ledgerTransport, offlineSigner;
      return _regenerator["default"].wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              interactiveTimeout = 120000; // Prepare ledger

              _context3.next = 3;
              return transport.create(interactiveTimeout, interactiveTimeout);

            case 3:
              ledgerTransport = _context3.sent;
              // Setup signer
              offlineSigner = new _ledgerAmino.LedgerSigner(ledgerTransport, {
                hdPaths: WalletOptions.hdPaths,
                prefix: config.prefix
              });
              return _context3.abrupt("return", offlineSigner);

            case 6:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    function setupWebLedger(_x5, _x6, _x7) {
      return _setupWebLedger.apply(this, arguments);
    }

    return setupWebLedger;
  }(),
  makeRandomClinet: function () {
    var _makeRandomClinet = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee4() {
      return _regenerator["default"].wrap(function _callee4$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              return _context4.abrupt("return", _protoSigning.DirectSecp256k1HdWallet.generate(12));

            case 1:
            case "end":
              return _context4.stop();
          }
        }
      }, _callee4);
    }));

    function makeRandomClinet() {
      return _makeRandomClinet.apply(this, arguments);
    }

    return makeRandomClinet;
  }()
};
exports.wallet = wallet;