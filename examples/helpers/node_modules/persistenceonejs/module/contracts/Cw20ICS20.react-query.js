import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

/**
 * This file was automatically generated by @cosmwasm/ts-codegen@0.14.0.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run the @cosmwasm/ts-codegen generate command to regenerate this file.
 */
import { useQuery, useMutation } from "@tanstack/react-query";
export const cw20ICS20QueryKeys = {
  contract: [{
    contract: "cw20ICS20"
  }],
  address: contractAddress => [_objectSpread(_objectSpread({}, cw20ICS20QueryKeys.contract[0]), {}, {
    address: contractAddress
  })],
  port: (contractAddress, args) => [_objectSpread(_objectSpread({}, cw20ICS20QueryKeys.address(contractAddress)[0]), {}, {
    method: "port",
    args
  })],
  listChannels: (contractAddress, args) => [_objectSpread(_objectSpread({}, cw20ICS20QueryKeys.address(contractAddress)[0]), {}, {
    method: "list_channels",
    args
  })],
  channel: (contractAddress, args) => [_objectSpread(_objectSpread({}, cw20ICS20QueryKeys.address(contractAddress)[0]), {}, {
    method: "channel",
    args
  })],
  config: (contractAddress, args) => [_objectSpread(_objectSpread({}, cw20ICS20QueryKeys.address(contractAddress)[0]), {}, {
    method: "config",
    args
  })],
  admin: (contractAddress, args) => [_objectSpread(_objectSpread({}, cw20ICS20QueryKeys.address(contractAddress)[0]), {}, {
    method: "admin",
    args
  })],
  allowed: (contractAddress, args) => [_objectSpread(_objectSpread({}, cw20ICS20QueryKeys.address(contractAddress)[0]), {}, {
    method: "allowed",
    args
  })],
  listAllowed: (contractAddress, args) => [_objectSpread(_objectSpread({}, cw20ICS20QueryKeys.address(contractAddress)[0]), {}, {
    method: "list_allowed",
    args
  })]
};
export function useCw20ICS20ListAllowedQuery({
  client,
  args,
  options
}) {
  return useQuery(cw20ICS20QueryKeys.listAllowed(client?.contractAddress, args), () => client ? client.listAllowed({
    limit: args.limit,
    startAfter: args.startAfter
  }) : Promise.reject(new Error("Invalid client")), _objectSpread(_objectSpread({}, options), {}, {
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }));
}
export function useCw20ICS20AllowedQuery({
  client,
  args,
  options
}) {
  return useQuery(cw20ICS20QueryKeys.allowed(client?.contractAddress, args), () => client ? client.allowed({
    contract: args.contract
  }) : Promise.reject(new Error("Invalid client")), _objectSpread(_objectSpread({}, options), {}, {
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }));
}
export function useCw20ICS20AdminQuery({
  client,
  options
}) {
  return useQuery(cw20ICS20QueryKeys.admin(client?.contractAddress), () => client ? client.admin() : Promise.reject(new Error("Invalid client")), _objectSpread(_objectSpread({}, options), {}, {
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }));
}
export function useCw20ICS20ConfigQuery({
  client,
  options
}) {
  return useQuery(cw20ICS20QueryKeys.config(client?.contractAddress), () => client ? client.config() : Promise.reject(new Error("Invalid client")), _objectSpread(_objectSpread({}, options), {}, {
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }));
}
export function useCw20ICS20ChannelQuery({
  client,
  args,
  options
}) {
  return useQuery(cw20ICS20QueryKeys.channel(client?.contractAddress, args), () => client ? client.channel({
    id: args.id
  }) : Promise.reject(new Error("Invalid client")), _objectSpread(_objectSpread({}, options), {}, {
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }));
}
export function useCw20ICS20ListChannelsQuery({
  client,
  options
}) {
  return useQuery(cw20ICS20QueryKeys.listChannels(client?.contractAddress), () => client ? client.listChannels() : Promise.reject(new Error("Invalid client")), _objectSpread(_objectSpread({}, options), {}, {
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }));
}
export function useCw20ICS20PortQuery({
  client,
  options
}) {
  return useQuery(cw20ICS20QueryKeys.port(client?.contractAddress), () => client ? client.port() : Promise.reject(new Error("Invalid client")), _objectSpread(_objectSpread({}, options), {}, {
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  }));
}
export function useCw20ICS20UpdateAdminMutation(options) {
  return useMutation(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.updateAdmin(msg, fee, memo, funds), options);
}
export function useCw20ICS20AllowMutation(options) {
  return useMutation(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.allow(msg, fee, memo, funds), options);
}
export function useCw20ICS20TransferMutation(options) {
  return useMutation(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.transfer(msg, fee, memo, funds), options);
}
export function useCw20ICS20ReceiveMutation(options) {
  return useMutation(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.receive(msg, fee, memo, funds), options);
}