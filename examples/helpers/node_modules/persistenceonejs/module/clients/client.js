import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";
import { createProtobufRpcClient, QueryClient, SigningStargateClient } from "@cosmjs/stargate";
import { SigningCosmWasmClient } from "@cosmjs/cosmwasm-stargate";
import { Tendermint34Client } from "@cosmjs/tendermint-rpc";
import { DefaultWalletOptions, LocalConfig } from "../config/config";
import { createRPCQueryClient } from "../proto/cosmwasm/rpc.query";
import { wallet } from "../wallet/wallet";
export class PersistenceClient {
  constructor(wasm, core, query, offlineSigner, mnemonic, config) {
    _defineProperty(this, "mnemonic", void 0);

    _defineProperty(this, "config", void 0);

    _defineProperty(this, "core", void 0);

    _defineProperty(this, "wasm", void 0);

    _defineProperty(this, "offlineSigner", void 0);

    _defineProperty(this, "query", void 0);

    this.core = core;
    this.wasm = wasm;
    this.query = query;
    this.offlineSigner = offlineSigner;
    this.mnemonic = mnemonic;
    this.config = config;
  }

  static async init(mnemonic, chainConfig, walletOptions) {
    const config = chainConfig || LocalConfig;
    const WalletOptions = walletOptions || DefaultWalletOptions; // Get offline signer

    const offlineSigner = await wallet.setupNodeLocal(config, mnemonic, WalletOptions); // Init SigningStargateClient client

    const core = await SigningStargateClient.connectWithSigner(config.rpc, offlineSigner, {
      prefix: config.prefix,
      gasPrice: config.gasPrice
    }); // Init SigningCosmWasmClient client

    const wasm = await SigningCosmWasmClient.connectWithSigner(config.rpc, offlineSigner, {
      prefix: config.prefix,
      gasPrice: config.gasPrice
    }); //query client

    const tendermintClient = await Tendermint34Client.connect(config.rpc);
    const queryClient = new QueryClient(tendermintClient);
    const rpc = await createProtobufRpcClient(queryClient);
    const query = await createRPCQueryClient({
      rpc: rpc
    });
    return new PersistenceClient(wasm, core, query, offlineSigner);
  }

}