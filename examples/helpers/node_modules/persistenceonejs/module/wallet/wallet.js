import { LedgerSigner } from "@cosmjs/ledger-amino";
import { DirectSecp256k1HdWallet } from "@cosmjs/proto-signing";
export const wallet = {
  setupWebKeplr: async config => {
    // check browser compatibility
    if (!window.keplr) {
      throw new Error("Keplr is not supported or installed on this browser!");
    } // try to enable keplr with given chainId


    await window.keplr.enable(config.chainId).catch(() => {
      throw new Error("Keplr can't connect to this chainId!");
    }); // Setup signer

    const offlineSigner = await window.getOfflineSignerAuto(config.chainId);
    return offlineSigner;
  },
  // setupCosmostation: async (config: Config): Promise<OfflineSigner> => {
  //   // Setup signer
  //   const offlineSigner = await getOfflineSigner(config.chainId);
  //   return [signingClient, offlineSigner];
  // },
  setupNodeLocal: async (config, mnemonic, WalletOptions) => {
    // Setup signer
    const offlineSigner = await DirectSecp256k1HdWallet.fromMnemonic(mnemonic, WalletOptions);
    return offlineSigner;
  },
  setupWebLedger: async (config, transport, WalletOptions) => {
    const interactiveTimeout = 120_000; // Prepare ledger

    const ledgerTransport = await transport.create(interactiveTimeout, interactiveTimeout); // Setup signer

    const offlineSigner = new LedgerSigner(ledgerTransport, {
      hdPaths: WalletOptions.hdPaths,
      prefix: config.prefix
    });
    return offlineSigner;
  },
  makeRandomClinet: async () => {
    return DirectSecp256k1HdWallet.generate(12);
  }
};